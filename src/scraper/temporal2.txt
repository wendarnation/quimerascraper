// src/scraper/scraper.service.ts
import {
  Injectable,
  Logger,
  BadRequestException,
  NotFoundException,
} from '@nestjs/common';
import { HttpService } from '@nestjs/axios';
import { ConfigService } from '@nestjs/config';
import { TiendaScraperFactory } from './tiendas/tienda-scraper.factory';
import {
  ZapatillaScraped,
  TiendaInfo,
} from './interfaces/quimera-scraper.interface';
import { RunScraperDto } from './dto/scraper.dto';
import { ApiService } from './api/api.service';

// Interfaces para resultados
interface ResultadoZapatilla {
  success: boolean;
  zapatilla: {
    marca: string;
    modelo: string;
    sku: string;
    id?: number;
  };
  tallas_procesadas?: number;
  error?: string;
}

interface ResultadoTienda {
  tienda: string;
  success: boolean;
  total?: number;
  error?: string;
}

interface ResultadoScraper {
  success: boolean;
  tienda: {
    id: number;
    nombre: string;
  };
  total: number;
  resultados: ResultadoZapatilla[];
}

interface ResultadoScraperAll {
  success: boolean;
  tiendas_procesadas: number;
  resultados: ResultadoTienda[];
}

@Injectable()
export class ScraperService {
  private readonly logger = new Logger(ScraperService.name);
  private runningScrapers: Map<number, boolean> = new Map(); // Para controlar scrapers por tienda
  private isGlobalRunning: boolean = false; // Para control global

  constructor(
    private readonly apiService: ApiService,
    private readonly scraperFactory: TiendaScraperFactory,
    private readonly httpService: HttpService,
    private readonly configService: ConfigService,
  ) {}

  /**
   * Limpia completamente la base de datos (tallas y zapatillas-tienda)
   */
  async limpiarBaseDatos(): Promise<void> {
    try {
      this.logger.log('Limpiando completamente la base de datos...');
      
      // 1. Primero obtener todas las relaciones zapatilla-tienda
      const zapatillasTienda = await this.apiService.makeAuthenticatedRequest(
        'get',
        '/zapatillas-tienda',
      );
      
      if (zapatillasTienda && zapatillasTienda.length > 0) {
        this.logger.log(`Encontradas ${zapatillasTienda.length} relaciones zapatilla-tienda para eliminar`);
        
        // 2. Para cada zapatilla-tienda, eliminar sus tallas
        for (const zt of zapatillasTienda) {
          try {
            // Eliminar las tallas asociadas
            const tallas = await this.apiService.makeAuthenticatedRequest(
              'get',
              `/tallas?zapatilla_tienda_id=${zt.id}`,
            );
            
            if (tallas && tallas.length > 0) {
              this.logger.log(`Eliminando ${tallas.length} tallas para zapatilla-tienda ID=${zt.id}`);
              
              for (const talla of tallas) {
                await this.apiService.makeAuthenticatedRequest(
                  'delete',
                  `/tallas/${talla.id}`,
                );
              }
            }
            
            // Eliminar la relación zapatilla-tienda
            await this.apiService.makeAuthenticatedRequest(
              'delete',
              `/zapatillas-tienda/${zt.id}`,
            );
            
            this.logger.log(`Eliminada relación zapatilla-tienda ID=${zt.id}`);
          } catch (error) {
            this.logger.error(`Error al eliminar zapatilla-tienda ID=${zt.id}: ${error.message}`);
          }
        }
      } else {
        this.logger.log('No hay relaciones zapatilla-tienda para eliminar');
      }
      
      this.logger.log('Base de datos limpiada con éxito');
    } catch (error) {
      this.logger.error(`Error al limpiar la base de datos: ${error.message}`);
    }
  }

  /**
   * Ejecuta el scraper para una tienda específica
   */
  async runScraper(params: RunScraperDto): Promise<ResultadoScraper> {
    const { tiendaId, options } = params;

    // Verificar si esta tienda específica ya está en proceso
    if (this.runningScrapers.get(tiendaId)) {
      throw new BadRequestException(
        `Ya hay un proceso de scraping en ejecución para la tienda ID ${tiendaId}`,
      );
    }

    // Usar la variable de entorno si no se proporciona la opción maxItems
    let scraperOptions = options;
    if (!scraperOptions) scraperOptions = {};
    if (scraperOptions.maxItems === undefined) {
      const envMaxItems = parseInt(this.configService.get('SCRAPER_MAX_ITEMS') || '50', 10);
      scraperOptions.maxItems = isNaN(envMaxItems) ? 50 : envMaxItems;
    }

    try {
      // Marcar esta tienda como en ejecución
      this.runningScrapers.set(tiendaId, true);

      // Obtener información de las tiendas
      const tiendas = await this.apiService.getTiendas();
      const tienda = tiendas.find((t) => t.id === tiendaId);

      if (!tienda) {
        throw new NotFoundException(
          `No se encontró la tienda con ID ${tiendaId}`,
        );
      }

      // Limpiamos datos existentes para evitar problemas con restricciones únicas
      await this.limpiarDatosExistentes(tiendaId);

      const tiendaInfo: TiendaInfo = {
        id: tienda.id,
        nombre: tienda.nombre,
        url: tienda.url,
      };

      this.logger.log(
        `Iniciando scraping para tienda: ${tienda.nombre} (ID: ${tienda.id})`,
      );

      // Crear el scraper adecuado para la tienda
      const scraper = this.scraperFactory.createScraper(tiendaInfo);

      // Configurar opciones del scraper
      if (scraperOptions) {
        scraper.setOptions(scraperOptions);
      }

      // Ejecutar el scraper
      const zapatillasScraped = await scraper.scrapeZapatillas();

      this.logger.log(
        `Scraping completado. Se encontraron ${zapatillasScraped.length} zapatillas`,
      );

      // Asegurarnos de que todas las zapatillas tengan el ID de tienda correcto
      zapatillasScraped.forEach(zapatilla => {
        zapatilla.tienda_id = tienda.id;
      });

      // Procesar los resultados utilizando la API
      const resultados = await this.procesarResultados(zapatillasScraped);

      return {
        success: true,
        tienda: {
          id: tienda.id,
          nombre: tienda.nombre,
        },
        total: zapatillasScraped.length,
        resultados,
      };
    } catch (error) {
      this.logger.error(
        `Error al ejecutar el scraper para tienda ${tiendaId}: ${error.message}`,
        error.stack,
      );
      throw error;
    } finally {
      // Importante: siempre limpiar el estado al finalizar
      this.runningScrapers.set(tiendaId, false);
    }
  }

  /**
   * Procesa los resultados del scraping y los guarda a través de la API
   */
  private async procesarResultados(
    zapatillasScraped: ZapatillaScraped[],
  ): Promise<ResultadoZapatilla[]> {
    const resultados: ResultadoZapatilla[] = [];

    for (const [index, zapatillaData] of zapatillasScraped.entries()) {
      try {
        this.logger.log(
          `Procesando zapatilla ${index + 1}/${zapatillasScraped.length}: ${zapatillaData.marca} ${zapatillaData.modelo}`,
        );

        // Utilizar el servicio de API para procesar la zapatilla
        const resultado =
          await this.apiService.procesarZapatilla(zapatillaData);

        resultados.push({
          success: true,
          zapatilla: {
            marca: zapatillaData.marca,
            modelo: zapatillaData.modelo,
            sku: zapatillaData.sku,
            id: resultado.zapatilla.id,
          },
          tallas_procesadas: zapatillaData.tallas.length,
        });
      } catch (error) {
        this.logger.error(
          `Error al procesar zapatilla ${zapatillaData.marca} ${zapatillaData.modelo}: ${error.message}`,
        );

        resultados.push({
          success: false,
          zapatilla: {
            marca: zapatillaData.marca,
            modelo: zapatillaData.modelo,
            sku: zapatillaData.sku,
          },
          error: error.message,
        });
      }
    }

    return resultados;
  }

  /**
   * Obtiene la lista de tiendas disponibles para scraping
   */
  async getTiendas(): Promise<TiendaInfo[]> {
    try {
      return await this.apiService.getTiendas();
    } catch (error) {
      this.logger.error(`Error al obtener tiendas: ${error.message}`);
      throw error;
    }
  }

  /**
   * Ejecuta el scraper para todas las tiendas
   */
  async runScraperForAllTiendas(options?: {
    maxItems?: number;
    headless?: boolean;
  }): Promise<ResultadoScraperAll> {
    if (this.isGlobalRunning) {
      throw new BadRequestException(
        'Ya hay un proceso de scraping global en ejecución',
      );
    }

    // Usar la variable de entorno si no se proporciona la opción maxItems
    if (!options) options = {};
    if (options.maxItems === undefined) {
      const envMaxItems = parseInt(this.configService.get('SCRAPER_MAX_ITEMS') || '50', 10);
      options.maxItems = isNaN(envMaxItems) ? 50 : envMaxItems;
    }

    try {
      this.isGlobalRunning = true;
      const tiendas = await this.getTiendas();
      const resultados: ResultadoTienda[] = [];

      if (tiendas.length === 0) {
        throw new Error('No hay tiendas activas disponibles para scraping');
      }

      this.logger.log(`Iniciando scraping para ${tiendas.length} tiendas`);
      
      // Limpiamos la base de datos completamente antes de iniciar
      await this.limpiarBaseDatos();
      
      // Procesamos secuencialmente una tienda por vez
      for (const tienda of tiendas) {
        try {
          // Verificar si esta tienda específica ya está en proceso
          if (this.runningScrapers.get(tienda.id)) {
            this.logger.warn(
              `Tienda ${tienda.nombre} ya está siendo procesada, saltando...`,
            );
            resultados.push({
              tienda: tienda.nombre,
              success: false,
              error: 'Tienda ya está siendo procesada por otro proceso',
            });
            continue;
          }

          // Ejecutar el scraper para esta tienda específica
          this.runningScrapers.set(tienda.id, true);

          const tiendaInfo: TiendaInfo = {
            id: tienda.id,
            nombre: tienda.nombre,
            url: tienda.url,
          };

          this.logger.log(
            `Procesando tienda: ${tienda.nombre} (ID: ${tienda.id})`,
          );

          // Crear y ejecutar el scraper
          const scraper = this.scraperFactory.createScraper(tiendaInfo);
          if (options) {
            scraper.setOptions(options);
          }

          // Obtener las zapatillas
          const zapatillasScraped = await scraper.scrapeZapatillas();
          
          // Distribuir las zapatillas entre todas las tiendas disponibles
          if (zapatillasScraped.length > 0) {
            this.logger.log(`Distribuyendo ${zapatillasScraped.length} zapatillas entre ${tiendas.length} tiendas...`);
            
            // Asignar el ID de tienda a cada zapatilla de forma alternada
            zapatillasScraped.forEach((zapatilla, index) => {
              // Usar el índice para distribuir las zapatillas entre las tiendas
              const tiendaAsignada = tiendas[index % tiendas.length];
              zapatilla.tienda_id = tiendaAsignada.id;
              
              this.logger.log(`Zapatilla ${index+1}: ${zapatilla.marca} ${zapatilla.modelo} asignada a tienda ${tiendaAsignada.nombre} (ID: ${tiendaAsignada.id})`);
            });
          }
          
          const resultadosTienda =
            await this.procesarResultados(zapatillasScraped);

          resultados.push({
            tienda: tienda.nombre,
            success: true,
            total: zapatillasScraped.length,
          });

          this.logger.log(
            `Tienda ${tienda.nombre} procesada con éxito: ${zapatillasScraped.length} zapatillas`,
          );
        } catch (error) {
          this.logger.error(
            `Error al procesar tienda ${tienda.nombre}: ${error.message}`,
          );

          resultados.push({
            tienda: tienda.nombre,
            success: false,
            error: error.message,
          });
        } finally {
          // Limpiar el estado de esta tienda
          this.runningScrapers.set(tienda.id, false);
        }
      }

      return {
        success: true,
        tiendas_procesadas: tiendas.length,
        resultados,
      };
    } catch (error) {
      this.logger.error(
        `Error al ejecutar scraper para todas las tiendas: ${error.message}`,
      );
      throw error;
    } finally {
      // Importante: siempre limpiar el estado global al finalizar
      this.isGlobalRunning = false;
    }
  }

  /**
   * Verifica el estado del servicio de scraping
   */
  getStatus(): {
    isRunning: boolean;
    runningScrapers: Record<number, boolean>;
  } {
    const runningScrapersObj: Record<number, boolean> = {};

    // Convertir el Map a un objeto plano para la respuesta
    this.runningScrapers.forEach((value, key) => {
      if (value) {
        // Solo incluir los que están actualmente ejecutándose
        runningScrapersObj[key] = value;
      }
    });

    return {
      isRunning: this.isGlobalRunning,
      runningScrapers: runningScrapersObj,
    };
  }

  /**
   * Limpia los datos existentes de una tienda para evitar conflictos
   * con restricciones únicas
   */
  private async limpiarDatosExistentes(tiendaId: number): Promise<void> {
    try {
      this.logger.log(`Limpiando datos existentes para la tienda ID ${tiendaId}...`);

      // Obtener todas las zapatillas-tienda existentes para esta tienda
      const zapatillasTienda = await this.apiService.makeAuthenticatedRequest(
        'get',
        `/zapatillas-tienda?tienda_id=${tiendaId}`,
      );

      if (zapatillasTienda && zapatillasTienda.length > 0) {
        this.logger.log(`Encontradas ${zapatillasTienda.length} relaciones zapatilla-tienda para limpiar.`);
        
        // Para cada relación zapatilla-tienda, eliminamos sus tallas
        for (const zt of zapatillasTienda) {
          try {
            // Primero eliminamos las tallas asociadas
            const tallas = await this.apiService.makeAuthenticatedRequest(
              'get',
              `/tallas?zapatilla_tienda_id=${zt.id}`,
            );
            
            if (tallas && tallas.length > 0) {
              this.logger.log(`Eliminando ${tallas.length} tallas para zapatilla-tienda ID=${zt.id}`);
              
              for (const talla of tallas) {
                await this.apiService.makeAuthenticatedRequest(
                  'delete',
                  `/tallas/${talla.id}`,
                );
              }
            }
            
            // Luego eliminamos la relación zapatilla-tienda
            await this.apiService.makeAuthenticatedRequest(
              'delete',
              `/zapatillas-tienda/${zt.id}`,
            );
            
            this.logger.log(`Eliminada relación zapatilla-tienda ID=${zt.id}`);
          } catch (error) {
            this.logger.error(`Error al limpiar datos para zapatilla-tienda ID=${zt.id}: ${error.message}`);
          }
        }
      } else {
        this.logger.log(`No hay relaciones zapatilla-tienda existentes para la tienda ID ${tiendaId}.`);
      }
    } catch (error) {
      this.logger.error(`Error al limpiar datos existentes: ${error.message}`);
      // No interrumpimos el proceso si hay un error en la limpieza
    }
  }
}